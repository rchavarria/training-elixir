# Hangman and Phoenix

## (Re)creating the Phoenix app with a Hangman connection

We're going to make our Phoenix app depend on our Hangman application

Where are we going to create the connection to Hangman? Based on the URL, so that each URL http://xx/hangman will be routed to our Hangman app in some way. Go and update `gallows/web/router.ex` file

Create a new *scope* for the route, a controller, a view and a template

Phoenix apps are created with a default `Page` controller/view/template. You’ll probably want to either delete or rename them in order to get your route (http://yourserver.com/hangman) working

## An initial server

We can save some data (such as the game state) in a (web) session. Phoenix uses encrypted cookies to store sessions. Cookies are sent back and forth between Phoenix and the browser.

`mix phx.routes` outputs all known routes in our app, for example:

```
hangman_path  GET   /hangman  GallowsWeb.HangmanController :new_game
hangman_path  POST  /hangman  GallowsWeb.HangmanController :create_game
```

`hangman_path` is a helper that will be available in the hangman view. It will create a link or an HTTP request to the right URL.

- `hangman_path(@conn, :new_game)` will create a GET request within a view
- `hangman_path(@conn, :create_game)` will create a POST request within a view

**What We Saw**

Avoid hand-coding HTML if helpers are available. They both add consistency and also automatically integrate into Phoenix.

The controller function invoked by an incoming request depends on both the incoming path and the HTTP verb used. A GET and a POST to the same URL look like two separate requests to Phoenix.

Sessions represent a history of interactions with a particular browser. Phoenix is flexible where the session data is stored—by default it is stored encrypted in a cookie in the browser. A session looks like a simple key/value store.

`put_session(conn, key, value)` returns a connection containing an updated session, and `get_session(conn, key)` returns a value from a session.

Try not to hard code URLs back into your application. Instead use the path helpers generated by the router.

**How To Find Helpers**

Path helpers are generated automatically by the definitions you add to the router. You can list them at the command prompt:

```
$ mix phx.routes
hangman_path  GET   /hangman  Gallows.Web.HangmanController :new_game
hangman_path  POST  /hangman  Gallows.Web.HangmanController :create_game
#-----------  ----  --------  ----------------------------- ------------
# helper      verb  path      controller                    function
```

Call a path helper, passing in the current connection and the name of the function, and it will return the path to use. It’s up to you to supply the verb.

**View Helpers**

There are a number of view-related helpers bundled into Phoenix. Have a look at


- [Helpers for working with HTML strings and templates](https://hexdocs.pm/phoenix_html/Phoenix.HTML.html)
- [Helpers related to producing HTML tags within templates](https://hexdocs.pm/phoenix_html/Phoenix.HTML.Tag.html)
- [Helpers related to producing HTML forms](https://hexdocs.pm/phoenix_html/Phoenix.HTML.Form.html)
- [Conveniences for working with links and URLs in HTML](https://hexdocs.pm/phoenix_html/Phoenix.HTML.Link.html)
- [Helpers related to formatting text](https://hexdocs.pm/phoenix_html/Phoenix.HTML.Format.html)

**Your Own Helpers**

A good rule of thumb is that an code more complex than a simple expression doesn’t belong in a template. Instead, encapsulate it into a helper and use the helper in the template.

Helpers are just functions, and so you can put them anywhere, and you can share them between templates. By default, **a view is created for each controller, and functions defined in that view will be available to all templates for that controller**. A view can use import to include the functions in another module (useful for sharing helpers between controllers) and a template can explicitly reference helpers outside its view by using the full module/function name.

## Add a form

## More complex helpers

## Wrapping up: adding graphics

